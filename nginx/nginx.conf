server {
    server_name _;
    listen 80;
    listen [::]:80 ipv6only=on;

    # redirect from http to https
    location / {
        return 301 https://$host$request_uri;
    }

    # Rule for legitimate ACME Challenge requests (like /.well-known/acme-challenge/xxxxxxxxx)
    location ^~ /.well-known/ {
        allow all;

        # Set correct content type. According to this:
        # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
        # Current specification requires "text/plain" or no content header at all.
        # It seems that "text/plain" is a safe option.
        default_type "text/plain";

        # allow LE to validate the domain
        root /var/www/certbot;
    }

    # Hide /acme-challenge subdirectory and return 404 on all requests.
    # It is somewhat more secure than letting Nginx return 403.
    # Ending slash is important!
    location = /.well-known/acme-challenge/ {
        return 404;
    }
}

server {
    listen [::]:443 ssl ipv6only=on;
    listen 443 ssl;
    server_name lemms.ru;
    root /var/www/html;
    index index.html;
    server_tokens off;

    if ($host != lemms.ru) {
        return 301 https://lemms.ru$request_uri;
    }

    ssl_certificate     /etc/letsencrypt/live/lemms.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/lemms.ru/privkey.pem;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    location ^~ /.well-known/ {
        # allow LE to validate the domain
        root /var/www/certbot;
        allow all;
    }

    location / {
        try_files $uri /index.html$is_args$args;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    location /api/ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Server-Address  $server_addr;

        proxy_redirect off;
        proxy_request_buffering off;
        client_max_body_size 0;
        proxy_max_temp_file_size 0;
        proxy_read_timeout 1200s;
        proxy_pass http://api/;
    }

    location ~ /\.ht {
        deny all;
    }

    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
}